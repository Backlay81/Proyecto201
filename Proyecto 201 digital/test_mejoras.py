"""
Script de prueba para las mejoras implementadas
"""
import sys
import os

# A√±adir paths necesarios
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), "credentials"))
sys.path.append(os.path.dirname(__file__))

from scripts.niche_analyzer_basic import NicheAnalyzerEnhanced

def test_mejoras():
    """Probar las mejoras de automatizaci√≥n y monetizaci√≥n"""
    print("üß™ TESTING DE MEJORAS IMPLEMENTADAS")
    print("=" * 50)
    
    analyzer = NicheAnalyzerEnhanced()
    
    # Test keywords que deber√≠an activar las mejoras
    test_keywords = [
        "mejores cuentas remuneradas 2025",  # Automatizable + Afiliaci√≥n + Anuncios (CORREGIR)
        "mejores productos financieros",     # Automatizable + Afiliaci√≥n + Anuncios
        "review pienso para perros",         # Automatizable + Solo Afiliaci√≥n  
        "coaching psicolog√≠a online",        # NO Automatizable + Solo Anuncios
        "vlog de mi d√≠a",                    # NO Automatizable + Dif√≠cil Monetizar
    ]
    
    print("üîç TESTING FUNCIONES MEJORADAS:")
    print("-" * 30)
    
    for keyword in test_keywords:
        print(f"\nüéØ Keyword: '{keyword}'")
        
        # Test automatizaci√≥n
        is_auto = analyzer.is_automatizable(keyword)
        print(f"   ü§ñ Automatizable: {'‚úÖ S√ç' if is_auto else '‚ùå NO'}")
        
        # Test monetizaci√≥n
        tipo_monetizacion = analyzer.clasificar_monetizacion(keyword)
        print(f"   üí∞ Tipo Monetizaci√≥n: {tipo_monetizacion}")
        
        # Test potencial (funci√≥n original)
        potencial = analyzer.get_monetization_potential(keyword)
        print(f"   üìà Potencial: {potencial}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Testing completado - Las mejoras est√°n funcionando!")

if __name__ == "__main__":
    test_mejoras()
